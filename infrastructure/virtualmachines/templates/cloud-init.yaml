apiVersion: v1
kind: Secret
metadata:
  name: cloudsecret
  labels:
    app.kubernetes.io/name: python-app-vm
    app.kubernetes.io/part-of: python-app
stringData:
  userdata: |
    #cloud-config
    # Disable SELinux to avoid permission issues
    bootcmd:
    - setenforce 0

    # Update system packages
    package_update: true
    package_upgrade: true
    packages:
      - git
      - python3
      - python3-pip
      - python3-devel
      - gcc
      - firewalld
      - openssh-server
      - jq
      - curl

    # Password authentication for SSH
    ssh_pwauth: true

    # Configure users with proper password settings
    users:
      - name: rakesh
        sudo: ['ALL=(ALL) NOPASSWD:ALL']
        groups: wheel
        home: /home/rakesh
        shell: /bin/bash
        lock_passwd: false
        plain_text_passwd: 'rakesh'
      - name: pydev
        sudo: ['ALL=(ALL) NOPASSWD:ALL']
        groups: wheel
        home: /home/pydev
        shell: /bin/bash
        lock_passwd: false
        plain_text_passwd: 'rakesh'

    # Ensure password auth works
    chpasswd:
      expire: false
      list: |
        rakesh:rakesh
        pydev:rakesh
    # Set permissions on /etc/ssh/sshd_config
    write_files:
      - path: /etc/ssh/sshd_config.d/allow_pw_auth.conf
        content: |
          PasswordAuthentication yes
          PermitRootLogin yes
      - path: /home/pydev/app/app.py
        content: |
          from flask import Flask, render_template, request
          import socket
          import os
          import datetime
          
          app = Flask(__name__)
          
          # Update log file path to use the mounted PV
          LOG_FILE = "/mnt/logs/requests.log"
          
          def get_hostname():
              return socket.gethostname()
              
          def log_request(request):
              """Log the incoming request with timestamp and client info"""
              timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              hostname = get_hostname()
              client_ip = request.remote_addr
              request_method = request.method
              request_path = request.path
              user_agent = request.headers.get('User-Agent', 'Unknown')
              
              log_line = f"{timestamp} | {hostname} | {client_ip} | {request_method} {request_path} | {user_agent}\n"
              
              # Ensure the log directory exists
              os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
              
              # Append to log file
              with open(LOG_FILE, 'a') as log_file:
                  log_file.write(log_line)
              
              return log_line
              
          def get_last_logs(n=100):
              """Get the last n lines from the log file"""
              try:
                  if not os.path.exists(LOG_FILE):
                      return ["No logs available yet"]
                      
                  with open(LOG_FILE, 'r') as log_file:
                      # Read all lines and get the last n entries
                      lines = log_file.readlines()
                      return lines[-n:] if len(lines) > 0 else ["No logs available yet"]
              except Exception as e:
                  return [f"Error reading log file: {str(e)}"]
          
          @app.route('/')
          def index():
              # Log this request
              log_request(request)
              
              # Get hostname and last logs
              hostname = get_hostname()
              last_logs = get_last_logs(100)
              
              return render_template('index.html', hostname=hostname, logs=last_logs)
          
          if __name__ == '__main__':
              port = int(os.environ.get('PORT', 8080))
              app.run(host='0.0.0.0', port=port, debug=True)
      - path: /home/pydev/app/requirements.txt
        content: |
          flask==2.0.1
          werkzeug<=2.0.3
      - path: /home/pydev/app/templates/index.html
        content: |
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Request Logger Service</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                      line-height: 1.6;
                  }
                  h1, h2 {
                      color: #2c3e50;
                      text-align: center;
                  }
                  .container {
                      background-color: #f8f9fa;
                      border-radius: 8px;
                      padding: 20px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  .info-item {
                      margin-bottom: 10px;
                  }
                  .info-label {
                      font-weight: bold;
                      color: #3498db;
                  }
                  .log-container {
                      background-color: #2c3e50;
                      color: #ecf0f1;
                      padding: 15px;
                      border-radius: 5px;
                      font-family: monospace;
                      white-space: pre-wrap;
                      max-height: 400px;
                      overflow-y: auto;
                  }
                  .log-entry {
                      padding: 2px 0;
                      border-bottom: 1px solid #34495e;
                  }
                  .log-entry:last-child {
                      border-bottom: none;
                  }
                  .refresh-btn {
                      display: block;
                      margin: 20px auto;
                      padding: 10px 20px;
                      background-color: #3498db;
                      color: white;
                      border: none;
                      border-radius: 5px;
                      cursor: pointer;
                      font-size: 16px;
                  }
                  .refresh-btn:hover {
                      background-color: #2980b9;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Request Logger Service</h1>
                  
                  <div class="info-item">
                      <span class="info-label">Hostname:</span> 
                      <span>'{{ "{{" }} hostname {{ "}}" }}'</span>
                  </div>
                  
                  <h2>Last 100 HTTP Requests</h2>
                  <div class="log-container">
                  {% for log in logs %}
                      <div class="log-entry">'{{ "{{" }} log {{ "}}" }}'</div>
                  {% endfor %}
                  </div>
                  
                  <button class="refresh-btn" onclick="location.reload()">Refresh Logs</button>
              </div>
          </body>
          </html>
      - path: /home/pydev/app/app.service
        content: |
          [Unit]
          Description=Python Flask Application
          After=network.target

          [Service]
          User=pydev
          WorkingDirectory=/home/pydev/app
          ExecStart=/usr/bin/python3 -m flask run --host=0.0.0.0 --port=8080
          Environment="FLASK_APP=app.py"
          Restart=always

          [Install]
          WantedBy=multi-user.target

    # Run commands to ensure proper setup
    runcmd:
      - hostname {{ .Values.hostname }}
      # Fix SSH permissions and restart SSH
      - systemctl restart sshd
      
      # Create mount point directory
      - mkdir -p /mnt/logs
      
      # Format the disk if it's not already formatted (first time only)
      - blkid /dev/vdb || mkfs -t ext4 /dev/vdb
      
      # Add entry to /etc/fstab for persistent mounting
      - grep -q "/dev/vdb" /etc/fstab || echo "/dev/vdb /mnt/logs ext4 defaults 0 0" >> /etc/fstab
      
      # Mount the persistent volume
      - mount -a || mount /dev/vdb /mnt/logs
      
      # Set proper permissions
      - chown -R pydev:pydev /mnt/logs
      - chmod 755 /mnt/logs
      
      # Set up Python app
      - mkdir -p /home/pydev/app/templates
      - chown -R pydev:pydev /home/pydev/app
      - chmod 755 /home/pydev/app
      
      # Install Python dependencies with the correct versions
      - pip3 install --upgrade pip
      - pip3 install werkzeug==2.0.3 flask==2.0.1
      
      # Create initial empty log file in the persistent volume
      - touch /mnt/logs/requests.log
      - chown pydev:pydev /mnt/logs/requests.log
      - chmod 644 /mnt/logs/requests.log
      
      # Enable and start the Python service
      - cp /home/pydev/app/app.service /etc/systemd/system/
      - systemctl daemon-reload
      - systemctl enable app.service
      - systemctl start app.service
      
      # Open firewall port
      - systemctl enable firewalld
      - systemctl start firewalld
      - firewall-cmd --permanent --add-port=8080/tcp
      - firewall-cmd --permanent --add-port=22/tcp
      - firewall-cmd --reload
